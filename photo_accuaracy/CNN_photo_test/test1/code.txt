from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

batch_size = 32
target_size = (64, 64)

# Initialising the CNN
classifier = Sequential()

# Step 1 - Convolution
classifier.add(Convolution2D(32, 3, 3, input_shape=(64, 64, 3), activation='relu'))

# Step 2 - Pooling
classifier.add(MaxPooling2D(pool_size=(2, 2)))

# Adding a second convolutional layer
classifier.add(Convolution2D(32, 3, 3, activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))

# Step 3 - Flattening
classifier.add(Flatten())

# Step 4 - Full connection
classifier.add(Dense(units=128, activation='relu'))
classifier.add(Dense(units=1, activation='sigmoid'))

# Compiling the CNN
classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

classifier.summary()

# Part 5 - Fitting the CNN to the images
# 設定批量生成器
train_datagen = ImageDataGenerator(rescale=1. / 255,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True,
                                   vertical_flip=True)

test_datagen = ImageDataGenerator(rescale=1. / 255)

# 讀取資料集+批量生成器，產生每epoch訓練樣本
training_set = train_datagen.flow_from_directory('dataset/train_set',
                                                 target_size=target_size,
                                                 batch_size=batch_size,
                                                 class_mode='binary')

test_set = test_datagen.flow_from_directory('dataset/test_set',
                                            target_size=target_size,
                                            batch_size=batch_size,
                                            class_mode='binary')

# 開始訓練模型
history = classifier.fit_generator(training_set,
                                   steps_per_epoch=437,
                                   epochs=25,
                                   validation_data=test_set,
                                   validation_steps=64)

# https://ithelp.ithome.com.tw/articles/10275918
# https://ithelp.ithome.com.tw/articles/10281515
# 儲存模型、紀錄學習曲線
# 儲存模型
# classifier.save('./CNN_mofel.h5')
# print('已儲存Densenet201_retrained_v2.h5')

# 畫出acc學習曲線
acc = history.history['accuracy']
epochs = range(1, len(acc) + 1)
val_acc = history.history['val_accuracy']
plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'r', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend(loc='lower right')
plt.grid()
# 儲存acc學習曲線
plt.savefig('./acc.png')
plt.show()

# 畫出loss學習曲線
loss = history.history['loss']
val_loss = history.history['val_loss']
plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.legend(loc='upper right')
plt.grid()
# 儲存loss學習曲線
plt.savefig('loss.png')
plt.show()

# -------------------------6.驗證模型準確度--------------------------
# 以vali資料夾驗證模型準確度
# test_loss, test_acc = classifier.evaluate_generator(training_set,
#                                                     steps=training_set.samples//batch_size,
#                                                     verbose=1)
# print('test acc:', test_acc)
# print('test loss:', test_loss)
